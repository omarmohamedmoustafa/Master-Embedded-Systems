
STM32F103C6_COTS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005a0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006d0  080006d8  000106d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006d0  080006d0  000106d8  2**0
                  CONTENTS
  4 .ARM          00000000  080006d0  080006d0  000106d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006d0  080006d8  000106d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006d0  080006d0  000106d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006d4  080006d4  000106d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000106d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000058  20000000  080006d8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000058  080006d8  00020058  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000106d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b81  00000000  00000000  00010701  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000344  00000000  00000000  00011282  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000664  00000000  00000000  000115c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000128  00000000  00000000  00011c30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000108  00000000  00000000  00011d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001603  00000000  00000000  00011e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000102c  00000000  00000000  00013463  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00006133  00000000  00000000  0001448f  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001a5c2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000378  00000000  00000000  0001a640  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	080006b8 	.word	0x080006b8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	080006b8 	.word	0x080006b8

08000170 <EXTI0_IRQHandler>:
	Update_EXTI(EXTI_CFG);

}

void EXTI0_IRQHandler(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	// c_w1 for pending register
	SET_BIT(EXTI->PR,0);
 8000174:	4b05      	ldr	r3, [pc, #20]	; (800018c <EXTI0_IRQHandler+0x1c>)
 8000176:	695b      	ldr	r3, [r3, #20]
 8000178:	4a04      	ldr	r2, [pc, #16]	; (800018c <EXTI0_IRQHandler+0x1c>)
 800017a:	f043 0301 	orr.w	r3, r3, #1
 800017e:	6153      	str	r3, [r2, #20]
	// jump to call back function
	gp_EXTI_IRQ_CALLBACK[0]();
 8000180:	4b03      	ldr	r3, [pc, #12]	; (8000190 <EXTI0_IRQHandler+0x20>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4798      	blx	r3
}
 8000186:	bf00      	nop
 8000188:	bd80      	pop	{r7, pc}
 800018a:	bf00      	nop
 800018c:	40010400 	.word	0x40010400
 8000190:	2000001c 	.word	0x2000001c

08000194 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	af00      	add	r7, sp, #0
	// c_w1 for pending register
	SET_BIT(EXTI->PR,1);
 8000198:	4b05      	ldr	r3, [pc, #20]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019a:	695b      	ldr	r3, [r3, #20]
 800019c:	4a04      	ldr	r2, [pc, #16]	; (80001b0 <EXTI1_IRQHandler+0x1c>)
 800019e:	f043 0302 	orr.w	r3, r3, #2
 80001a2:	6153      	str	r3, [r2, #20]
	// jump to call back function
	gp_EXTI_IRQ_CALLBACK[1]();
 80001a4:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <EXTI1_IRQHandler+0x20>)
 80001a6:	685b      	ldr	r3, [r3, #4]
 80001a8:	4798      	blx	r3
}
 80001aa:	bf00      	nop
 80001ac:	bd80      	pop	{r7, pc}
 80001ae:	bf00      	nop
 80001b0:	40010400 	.word	0x40010400
 80001b4:	2000001c 	.word	0x2000001c

080001b8 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	af00      	add	r7, sp, #0
	// c_w1 for pending register
	SET_BIT(EXTI->PR,2);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001be:	695b      	ldr	r3, [r3, #20]
 80001c0:	4a04      	ldr	r2, [pc, #16]	; (80001d4 <EXTI2_IRQHandler+0x1c>)
 80001c2:	f043 0304 	orr.w	r3, r3, #4
 80001c6:	6153      	str	r3, [r2, #20]
	// jump to call back function
	gp_EXTI_IRQ_CALLBACK[2]();
 80001c8:	4b03      	ldr	r3, [pc, #12]	; (80001d8 <EXTI2_IRQHandler+0x20>)
 80001ca:	689b      	ldr	r3, [r3, #8]
 80001cc:	4798      	blx	r3
}
 80001ce:	bf00      	nop
 80001d0:	bd80      	pop	{r7, pc}
 80001d2:	bf00      	nop
 80001d4:	40010400 	.word	0x40010400
 80001d8:	2000001c 	.word	0x2000001c

080001dc <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	af00      	add	r7, sp, #0
	// c_w1 for pending register
	SET_BIT(EXTI->PR,3);
 80001e0:	4b05      	ldr	r3, [pc, #20]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e2:	695b      	ldr	r3, [r3, #20]
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <EXTI3_IRQHandler+0x1c>)
 80001e6:	f043 0308 	orr.w	r3, r3, #8
 80001ea:	6153      	str	r3, [r2, #20]
	// jump to call back function
	gp_EXTI_IRQ_CALLBACK[3]();
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <EXTI3_IRQHandler+0x20>)
 80001ee:	68db      	ldr	r3, [r3, #12]
 80001f0:	4798      	blx	r3
}
 80001f2:	bf00      	nop
 80001f4:	bd80      	pop	{r7, pc}
 80001f6:	bf00      	nop
 80001f8:	40010400 	.word	0x40010400
 80001fc:	2000001c 	.word	0x2000001c

08000200 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	// c_w1 for pending register
	SET_BIT(EXTI->PR,4);
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI4_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI4_IRQHandler+0x1c>)
 800020a:	f043 0310 	orr.w	r3, r3, #16
 800020e:	6153      	str	r3, [r2, #20]
	// jump to call back function
	gp_EXTI_IRQ_CALLBACK[4]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI4_IRQHandler+0x20>)
 8000212:	691b      	ldr	r3, [r3, #16]
 8000214:	4798      	blx	r3
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	2000001c 	.word	0x2000001c

08000224 <MCAL_uint8_GET_PIN_LOCATION>:
/******* VERSION: 01***********************************************************************************************/
#include "GPIO.h"


uint8_t MCAL_uint8_GET_PIN_LOCATION(uint8_t PIN_NO)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	71fb      	strb	r3, [r7, #7]
	switch(PIN_NO)
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	2b0f      	cmp	r3, #15
 8000232:	d843      	bhi.n	80002bc <MCAL_uint8_GET_PIN_LOCATION+0x98>
 8000234:	a201      	add	r2, pc, #4	; (adr r2, 800023c <MCAL_uint8_GET_PIN_LOCATION+0x18>)
 8000236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800023a:	bf00      	nop
 800023c:	0800027d 	.word	0x0800027d
 8000240:	08000281 	.word	0x08000281
 8000244:	08000285 	.word	0x08000285
 8000248:	08000289 	.word	0x08000289
 800024c:	0800028d 	.word	0x0800028d
 8000250:	08000291 	.word	0x08000291
 8000254:	08000295 	.word	0x08000295
 8000258:	08000299 	.word	0x08000299
 800025c:	0800029d 	.word	0x0800029d
 8000260:	080002a1 	.word	0x080002a1
 8000264:	080002a5 	.word	0x080002a5
 8000268:	080002a9 	.word	0x080002a9
 800026c:	080002ad 	.word	0x080002ad
 8000270:	080002b1 	.word	0x080002b1
 8000274:	080002b5 	.word	0x080002b5
 8000278:	080002b9 	.word	0x080002b9
	{
	case 0:
		return 0;break;
 800027c:	2300      	movs	r3, #0
 800027e:	e01e      	b.n	80002be <MCAL_uint8_GET_PIN_LOCATION+0x9a>
	case 1:
		return 4;break;
 8000280:	2304      	movs	r3, #4
 8000282:	e01c      	b.n	80002be <MCAL_uint8_GET_PIN_LOCATION+0x9a>
	case 2:
		return 8;break;
 8000284:	2308      	movs	r3, #8
 8000286:	e01a      	b.n	80002be <MCAL_uint8_GET_PIN_LOCATION+0x9a>
	case 3:
		return 12;break;
 8000288:	230c      	movs	r3, #12
 800028a:	e018      	b.n	80002be <MCAL_uint8_GET_PIN_LOCATION+0x9a>
	case 4:
		return 16;break;
 800028c:	2310      	movs	r3, #16
 800028e:	e016      	b.n	80002be <MCAL_uint8_GET_PIN_LOCATION+0x9a>
	case 5:
		return 20;break;
 8000290:	2314      	movs	r3, #20
 8000292:	e014      	b.n	80002be <MCAL_uint8_GET_PIN_LOCATION+0x9a>
	case 6:
		return 24;break;
 8000294:	2318      	movs	r3, #24
 8000296:	e012      	b.n	80002be <MCAL_uint8_GET_PIN_LOCATION+0x9a>
	case 7:
		return 28;break;
 8000298:	231c      	movs	r3, #28
 800029a:	e010      	b.n	80002be <MCAL_uint8_GET_PIN_LOCATION+0x9a>
	case 8:
		return 0;break;
 800029c:	2300      	movs	r3, #0
 800029e:	e00e      	b.n	80002be <MCAL_uint8_GET_PIN_LOCATION+0x9a>
	case 9:
		return 4;break;
 80002a0:	2304      	movs	r3, #4
 80002a2:	e00c      	b.n	80002be <MCAL_uint8_GET_PIN_LOCATION+0x9a>
	case 10:
		return 8;break;
 80002a4:	2308      	movs	r3, #8
 80002a6:	e00a      	b.n	80002be <MCAL_uint8_GET_PIN_LOCATION+0x9a>
	case 11:
		return 12;break;
 80002a8:	230c      	movs	r3, #12
 80002aa:	e008      	b.n	80002be <MCAL_uint8_GET_PIN_LOCATION+0x9a>
	case 12:
		return 16;break;
 80002ac:	2310      	movs	r3, #16
 80002ae:	e006      	b.n	80002be <MCAL_uint8_GET_PIN_LOCATION+0x9a>
	case 13:
		return 20;break;
 80002b0:	2314      	movs	r3, #20
 80002b2:	e004      	b.n	80002be <MCAL_uint8_GET_PIN_LOCATION+0x9a>
	case 14:
		return 24;break;
 80002b4:	2318      	movs	r3, #24
 80002b6:	e002      	b.n	80002be <MCAL_uint8_GET_PIN_LOCATION+0x9a>
	case 15:
		return 28;break;
 80002b8:	231c      	movs	r3, #28
 80002ba:	e000      	b.n	80002be <MCAL_uint8_GET_PIN_LOCATION+0x9a>
	default:
		return 255;
 80002bc:	23ff      	movs	r3, #255	; 0xff
	}
}
 80002be:	4618      	mov	r0, r3
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr

080002c8 <MCAL_vid_GPIO_INIT>:
void MCAL_vid_GPIO_INIT(s_GPIO_t* GPIOx , s_GPIO_PIN_CONFIG_t* PIN_CONFIG)
{
 80002c8:	b590      	push	{r4, r7, lr}
 80002ca:	b085      	sub	sp, #20
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	6078      	str	r0, [r7, #4]
 80002d0:	6039      	str	r1, [r7, #0]
	if(		(GPIOx == GPIOA) 	||	 (GPIOx== GPIOB) 	||	 (GPIOx== GPIOC) 	||	 (GPIOx== GPIOD))
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4a5a      	ldr	r2, [pc, #360]	; (8000440 <MCAL_vid_GPIO_INIT+0x178>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d00c      	beq.n	80002f4 <MCAL_vid_GPIO_INIT+0x2c>
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	4a59      	ldr	r2, [pc, #356]	; (8000444 <MCAL_vid_GPIO_INIT+0x17c>)
 80002de:	4293      	cmp	r3, r2
 80002e0:	d008      	beq.n	80002f4 <MCAL_vid_GPIO_INIT+0x2c>
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	4a58      	ldr	r2, [pc, #352]	; (8000448 <MCAL_vid_GPIO_INIT+0x180>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d004      	beq.n	80002f4 <MCAL_vid_GPIO_INIT+0x2c>
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	4a57      	ldr	r2, [pc, #348]	; (800044c <MCAL_vid_GPIO_INIT+0x184>)
 80002ee:	4293      	cmp	r3, r2
 80002f0:	f040 80a1 	bne.w	8000436 <MCAL_vid_GPIO_INIT+0x16e>
	{
		volatile uint32_t* CONFIG_REGISTER = (PIN_CONFIG->PIN_NUM < 8 )?  &GPIOx->CRL : &GPIOx->CRH   ;
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2b07      	cmp	r3, #7
 80002fa:	d801      	bhi.n	8000300 <MCAL_vid_GPIO_INIT+0x38>
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	e001      	b.n	8000304 <MCAL_vid_GPIO_INIT+0x3c>
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	3304      	adds	r3, #4
 8000304:	60fb      	str	r3, [r7, #12]
		*CONFIG_REGISTER &= ~(0xF << MCAL_uint8_GET_PIN_LOCATION(PIN_CONFIG->PIN_NUM));
 8000306:	683b      	ldr	r3, [r7, #0]
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	4618      	mov	r0, r3
 800030c:	f7ff ff8a 	bl	8000224 <MCAL_uint8_GET_PIN_LOCATION>
 8000310:	4603      	mov	r3, r0
 8000312:	461a      	mov	r2, r3
 8000314:	230f      	movs	r3, #15
 8000316:	4093      	lsls	r3, r2
 8000318:	43da      	mvns	r2, r3
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	401a      	ands	r2, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	601a      	str	r2, [r3, #0]

		//-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
		//	OUTPUT PIN (CNF + SPEED)
		//-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
		if((PIN_CONFIG->PIN_MODE == MCAL_GPIO_GPO_OD) || (PIN_CONFIG->PIN_MODE == MCAL_GPIO_GPO_PP) || (PIN_CONFIG->PIN_MODE == MCAL_GPIO_AFO_PP) || (PIN_CONFIG->PIN_MODE == MCAL_GPIO_AFO_OD))
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	785b      	ldrb	r3, [r3, #1]
 8000328:	2b05      	cmp	r3, #5
 800032a:	d00b      	beq.n	8000344 <MCAL_vid_GPIO_INIT+0x7c>
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	785b      	ldrb	r3, [r3, #1]
 8000330:	2b04      	cmp	r3, #4
 8000332:	d007      	beq.n	8000344 <MCAL_vid_GPIO_INIT+0x7c>
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	785b      	ldrb	r3, [r3, #1]
 8000338:	2b06      	cmp	r3, #6
 800033a:	d003      	beq.n	8000344 <MCAL_vid_GPIO_INIT+0x7c>
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	785b      	ldrb	r3, [r3, #1]
 8000340:	2b07      	cmp	r3, #7
 8000342:	d11d      	bne.n	8000380 <MCAL_vid_GPIO_INIT+0xb8>
		{
			uint8_t CONF_MODE = ((	(	(PIN_CONFIG->PIN_MODE - 4)	<<	2	) | (PIN_CONFIG->PIN_OUTPUT_SPEED)	) & 0xF	);
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	785b      	ldrb	r3, [r3, #1]
 8000348:	3b04      	subs	r3, #4
 800034a:	009b      	lsls	r3, r3, #2
 800034c:	b25a      	sxtb	r2, r3
 800034e:	683b      	ldr	r3, [r7, #0]
 8000350:	789b      	ldrb	r3, [r3, #2]
 8000352:	b25b      	sxtb	r3, r3
 8000354:	4313      	orrs	r3, r2
 8000356:	b25b      	sxtb	r3, r3
 8000358:	b2db      	uxtb	r3, r3
 800035a:	f003 030f 	and.w	r3, r3, #15
 800035e:	723b      	strb	r3, [r7, #8]
			(*CONFIG_REGISTER) |= (uint32_t)(CONF_MODE << MCAL_uint8_GET_PIN_LOCATION(PIN_CONFIG->PIN_NUM));
 8000360:	7a3c      	ldrb	r4, [r7, #8]
 8000362:	683b      	ldr	r3, [r7, #0]
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	4618      	mov	r0, r3
 8000368:	f7ff ff5c 	bl	8000224 <MCAL_uint8_GET_PIN_LOCATION>
 800036c:	4603      	mov	r3, r0
 800036e:	fa04 f303 	lsl.w	r3, r4, r3
 8000372:	461a      	mov	r2, r3
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	431a      	orrs	r2, r3
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	601a      	str	r2, [r3, #0]
		{
 800037e:	e05a      	b.n	8000436 <MCAL_vid_GPIO_INIT+0x16e>
			//		  MCAL_GPIO_FLO_IN			1
			//		  MCAL_GPIO_PU_IN			2
			//		  MCAL_GPIO_PD_IN			3
			//-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
		{
			if(PIN_CONFIG->PIN_MODE == MCAL_GPIO_ANALOG || PIN_CONFIG->PIN_MODE == MCAL_GPIO_FLO_IN)
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	785b      	ldrb	r3, [r3, #1]
 8000384:	2b00      	cmp	r3, #0
 8000386:	d003      	beq.n	8000390 <MCAL_vid_GPIO_INIT+0xc8>
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	785b      	ldrb	r3, [r3, #1]
 800038c:	2b01      	cmp	r3, #1
 800038e:	d113      	bne.n	80003b8 <MCAL_vid_GPIO_INIT+0xf0>
			{
				uint8_t CONF_MODE = ((PIN_CONFIG->PIN_MODE)	<<	2);
 8000390:	683b      	ldr	r3, [r7, #0]
 8000392:	785b      	ldrb	r3, [r3, #1]
 8000394:	009b      	lsls	r3, r3, #2
 8000396:	727b      	strb	r3, [r7, #9]
				(*CONFIG_REGISTER) |= (uint32_t)(CONF_MODE << MCAL_uint8_GET_PIN_LOCATION(PIN_CONFIG->PIN_NUM));
 8000398:	7a7c      	ldrb	r4, [r7, #9]
 800039a:	683b      	ldr	r3, [r7, #0]
 800039c:	781b      	ldrb	r3, [r3, #0]
 800039e:	4618      	mov	r0, r3
 80003a0:	f7ff ff40 	bl	8000224 <MCAL_uint8_GET_PIN_LOCATION>
 80003a4:	4603      	mov	r3, r0
 80003a6:	fa04 f303 	lsl.w	r3, r4, r3
 80003aa:	461a      	mov	r2, r3
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	431a      	orrs	r2, r3
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	601a      	str	r2, [r3, #0]
			{
 80003b6:	e03e      	b.n	8000436 <MCAL_vid_GPIO_INIT+0x16e>
			}
			else if (PIN_CONFIG->PIN_MODE == MCAL_GPIO_PU_IN)// INPUT PULL up
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	785b      	ldrb	r3, [r3, #1]
 80003bc:	2b02      	cmp	r3, #2
 80003be:	d11d      	bne.n	80003fc <MCAL_vid_GPIO_INIT+0x134>
			{
				uint8_t CONF_MODE = ((PIN_CONFIG->PIN_MODE)	<<	2);
 80003c0:	683b      	ldr	r3, [r7, #0]
 80003c2:	785b      	ldrb	r3, [r3, #1]
 80003c4:	009b      	lsls	r3, r3, #2
 80003c6:	72bb      	strb	r3, [r7, #10]
				SET_BIT(GPIOx->ODR, PIN_CONFIG->PIN_NUM);
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	68db      	ldr	r3, [r3, #12]
 80003cc:	683a      	ldr	r2, [r7, #0]
 80003ce:	7812      	ldrb	r2, [r2, #0]
 80003d0:	4611      	mov	r1, r2
 80003d2:	2201      	movs	r2, #1
 80003d4:	408a      	lsls	r2, r1
 80003d6:	431a      	orrs	r2, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	60da      	str	r2, [r3, #12]
				(*CONFIG_REGISTER) |= (uint32_t)(CONF_MODE << MCAL_uint8_GET_PIN_LOCATION(PIN_CONFIG->PIN_NUM));
 80003dc:	7abc      	ldrb	r4, [r7, #10]
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	781b      	ldrb	r3, [r3, #0]
 80003e2:	4618      	mov	r0, r3
 80003e4:	f7ff ff1e 	bl	8000224 <MCAL_uint8_GET_PIN_LOCATION>
 80003e8:	4603      	mov	r3, r0
 80003ea:	fa04 f303 	lsl.w	r3, r4, r3
 80003ee:	461a      	mov	r2, r3
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	431a      	orrs	r2, r3
 80003f6:	68fb      	ldr	r3, [r7, #12]
 80003f8:	601a      	str	r2, [r3, #0]
				CLR_BIT(GPIOx->ODR, PIN_CONFIG->PIN_NUM);
				(*CONFIG_REGISTER) |= (uint32_t)(CONF_MODE << MCAL_uint8_GET_PIN_LOCATION(PIN_CONFIG->PIN_NUM));
			}
		}
	}
}
 80003fa:	e01c      	b.n	8000436 <MCAL_vid_GPIO_INIT+0x16e>
				uint8_t CONF_MODE = ((MCAL_GPIO_PU_IN)	<<	2);
 80003fc:	2308      	movs	r3, #8
 80003fe:	72fb      	strb	r3, [r7, #11]
				CLR_BIT(GPIOx->ODR, PIN_CONFIG->PIN_NUM);
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	68db      	ldr	r3, [r3, #12]
 8000404:	683a      	ldr	r2, [r7, #0]
 8000406:	7812      	ldrb	r2, [r2, #0]
 8000408:	4611      	mov	r1, r2
 800040a:	2201      	movs	r2, #1
 800040c:	408a      	lsls	r2, r1
 800040e:	43d2      	mvns	r2, r2
 8000410:	401a      	ands	r2, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	60da      	str	r2, [r3, #12]
				(*CONFIG_REGISTER) |= (uint32_t)(CONF_MODE << MCAL_uint8_GET_PIN_LOCATION(PIN_CONFIG->PIN_NUM));
 8000416:	7afc      	ldrb	r4, [r7, #11]
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	4618      	mov	r0, r3
 800041e:	f7ff ff01 	bl	8000224 <MCAL_uint8_GET_PIN_LOCATION>
 8000422:	4603      	mov	r3, r0
 8000424:	fa04 f303 	lsl.w	r3, r4, r3
 8000428:	461a      	mov	r2, r3
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	431a      	orrs	r2, r3
 8000430:	68fb      	ldr	r3, [r7, #12]
 8000432:	601a      	str	r2, [r3, #0]
}
 8000434:	e7ff      	b.n	8000436 <MCAL_vid_GPIO_INIT+0x16e>
 8000436:	bf00      	nop
 8000438:	3714      	adds	r7, #20
 800043a:	46bd      	mov	sp, r7
 800043c:	bd90      	pop	{r4, r7, pc}
 800043e:	bf00      	nop
 8000440:	40010800 	.word	0x40010800
 8000444:	40010c00 	.word	0x40010c00
 8000448:	40011000 	.word	0x40011000
 800044c:	40011400 	.word	0x40011400

08000450 <MCAL_uint8_GPIO_READ_PIN>:
		GPIOx->ODR &= (uint32_t)PORT_VAL;
	}
}

uint8_t MCAL_uint8_GPIO_READ_PIN(s_GPIO_t* GPIOx, uint8_t PIN_NO)
{
 8000450:	b480      	push	{r7}
 8000452:	b085      	sub	sp, #20
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	460b      	mov	r3, r1
 800045a:	70fb      	strb	r3, [r7, #3]
	uint8_t PIN_VAL;
	if(		(GPIOx == GPIOA) 	||	 (GPIOx== GPIOB) 	||	 (GPIOx== GPIOC) 	||	 (GPIOx== GPIOD))
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a10      	ldr	r2, [pc, #64]	; (80004a0 <MCAL_uint8_GPIO_READ_PIN+0x50>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d00b      	beq.n	800047c <MCAL_uint8_GPIO_READ_PIN+0x2c>
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4a0f      	ldr	r2, [pc, #60]	; (80004a4 <MCAL_uint8_GPIO_READ_PIN+0x54>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d007      	beq.n	800047c <MCAL_uint8_GPIO_READ_PIN+0x2c>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a0e      	ldr	r2, [pc, #56]	; (80004a8 <MCAL_uint8_GPIO_READ_PIN+0x58>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d003      	beq.n	800047c <MCAL_uint8_GPIO_READ_PIN+0x2c>
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	4a0d      	ldr	r2, [pc, #52]	; (80004ac <MCAL_uint8_GPIO_READ_PIN+0x5c>)
 8000478:	4293      	cmp	r3, r2
 800047a:	d10a      	bne.n	8000492 <MCAL_uint8_GPIO_READ_PIN+0x42>
	{
		PIN_VAL = GET_BIT(GPIOx->IDR, PIN_NO);
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	689a      	ldr	r2, [r3, #8]
 8000480:	78fb      	ldrb	r3, [r7, #3]
 8000482:	fa22 f303 	lsr.w	r3, r2, r3
 8000486:	b2db      	uxtb	r3, r3
 8000488:	f003 0301 	and.w	r3, r3, #1
 800048c:	73fb      	strb	r3, [r7, #15]
		return PIN_VAL;
 800048e:	7bfb      	ldrb	r3, [r7, #15]
 8000490:	e000      	b.n	8000494 <MCAL_uint8_GPIO_READ_PIN+0x44>
	}
	return (uint8_t)0;
 8000492:	2300      	movs	r3, #0
}
 8000494:	4618      	mov	r0, r3
 8000496:	3714      	adds	r7, #20
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	40010800 	.word	0x40010800
 80004a4:	40010c00 	.word	0x40010c00
 80004a8:	40011000 	.word	0x40011000
 80004ac:	40011400 	.word	0x40011400

080004b0 <MCAL_vid_TOGGLE_PIN>:

void MCAL_vid_TOGGLE_PIN(s_GPIO_t* GPIOx, uint8_t PIN_NO)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	460b      	mov	r3, r1
 80004ba:	70fb      	strb	r3, [r7, #3]
	if(		(GPIOx == GPIOA) 	||	 (GPIOx== GPIOB) 	||	 (GPIOx== GPIOC) 	||	 (GPIOx== GPIOD))
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a0e      	ldr	r2, [pc, #56]	; (80004f8 <MCAL_vid_TOGGLE_PIN+0x48>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d00b      	beq.n	80004dc <MCAL_vid_TOGGLE_PIN+0x2c>
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4a0d      	ldr	r2, [pc, #52]	; (80004fc <MCAL_vid_TOGGLE_PIN+0x4c>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d007      	beq.n	80004dc <MCAL_vid_TOGGLE_PIN+0x2c>
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	4a0c      	ldr	r2, [pc, #48]	; (8000500 <MCAL_vid_TOGGLE_PIN+0x50>)
 80004d0:	4293      	cmp	r3, r2
 80004d2:	d003      	beq.n	80004dc <MCAL_vid_TOGGLE_PIN+0x2c>
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4a0b      	ldr	r2, [pc, #44]	; (8000504 <MCAL_vid_TOGGLE_PIN+0x54>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	d108      	bne.n	80004ee <MCAL_vid_TOGGLE_PIN+0x3e>
	{
		TOG_BIT(GPIOx->ODR,PIN_NO);
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	78fa      	ldrb	r2, [r7, #3]
 80004e2:	2101      	movs	r1, #1
 80004e4:	fa01 f202 	lsl.w	r2, r1, r2
 80004e8:	405a      	eors	r2, r3
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	60da      	str	r2, [r3, #12]
	}
}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr
 80004f8:	40010800 	.word	0x40010800
 80004fc:	40010c00 	.word	0x40010c00
 8000500:	40011000 	.word	0x40011000
 8000504:	40011400 	.word	0x40011400

08000508 <RCC_Init>:
#include "STM32F103C6xx.h"
#include "GPIO.h"
#include "EXTI.h"
void RCC_Init()
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
	MCAL_RCC_ENABLE_GPIOA();
 800050c:	4b07      	ldr	r3, [pc, #28]	; (800052c <RCC_Init+0x24>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a06      	ldr	r2, [pc, #24]	; (800052c <RCC_Init+0x24>)
 8000512:	f043 0304 	orr.w	r3, r3, #4
 8000516:	6193      	str	r3, [r2, #24]
	MCAL_RCC_ENABLE_GPIOB();
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <RCC_Init+0x24>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	4a03      	ldr	r2, [pc, #12]	; (800052c <RCC_Init+0x24>)
 800051e:	f043 0308 	orr.w	r3, r3, #8
 8000522:	6193      	str	r3, [r2, #24]
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr
 800052c:	40021000 	.word	0x40021000

08000530 <GPIO_Init>:
void GPIO_Init()
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
	s_GPIO_PIN_CONFIG_t* PIN_CFG;
	PIN_CFG->PIN_NUM=GPIO_PIN1;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2201      	movs	r2, #1
 800053a:	701a      	strb	r2, [r3, #0]
	PIN_CFG->PIN_MODE = MCAL_GPIO_GPO_PP;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2204      	movs	r2, #4
 8000540:	705a      	strb	r2, [r3, #1]
	PIN_CFG->PIN_OUTPUT_SPEED = MCAL_GPIO_OUT_10MHZ;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	2201      	movs	r2, #1
 8000546:	709a      	strb	r2, [r3, #2]
	MCAL_vid_GPIO_INIT(GPIOB, PIN_CFG);
 8000548:	6879      	ldr	r1, [r7, #4]
 800054a:	4817      	ldr	r0, [pc, #92]	; (80005a8 <GPIO_Init+0x78>)
 800054c:	f7ff febc 	bl	80002c8 <MCAL_vid_GPIO_INIT>

	PIN_CFG->PIN_NUM=GPIO_PIN13;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	220d      	movs	r2, #13
 8000554:	701a      	strb	r2, [r3, #0]
	PIN_CFG->PIN_MODE = MCAL_GPIO_GPO_PP;
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2204      	movs	r2, #4
 800055a:	705a      	strb	r2, [r3, #1]
	PIN_CFG->PIN_OUTPUT_SPEED = MCAL_GPIO_OUT_10MHZ;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2201      	movs	r2, #1
 8000560:	709a      	strb	r2, [r3, #2]
	MCAL_vid_GPIO_INIT(GPIOB, PIN_CFG);
 8000562:	6879      	ldr	r1, [r7, #4]
 8000564:	4810      	ldr	r0, [pc, #64]	; (80005a8 <GPIO_Init+0x78>)
 8000566:	f7ff feaf 	bl	80002c8 <MCAL_vid_GPIO_INIT>

	PIN_CFG->PIN_NUM=GPIO_PIN1;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2201      	movs	r2, #1
 800056e:	701a      	strb	r2, [r3, #0]
	PIN_CFG->PIN_MODE = MCAL_GPIO_FLO_IN;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	2201      	movs	r2, #1
 8000574:	705a      	strb	r2, [r3, #1]
	PIN_CFG->PIN_OUTPUT_SPEED = MCAL_GPIO_INPUT;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2200      	movs	r2, #0
 800057a:	709a      	strb	r2, [r3, #2]
	MCAL_vid_GPIO_INIT(GPIOA, PIN_CFG);
 800057c:	6879      	ldr	r1, [r7, #4]
 800057e:	480b      	ldr	r0, [pc, #44]	; (80005ac <GPIO_Init+0x7c>)
 8000580:	f7ff fea2 	bl	80002c8 <MCAL_vid_GPIO_INIT>

	PIN_CFG->PIN_NUM=GPIO_PIN13;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	220d      	movs	r2, #13
 8000588:	701a      	strb	r2, [r3, #0]
	PIN_CFG->PIN_MODE = MCAL_GPIO_FLO_IN;
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2201      	movs	r2, #1
 800058e:	705a      	strb	r2, [r3, #1]
	PIN_CFG->PIN_OUTPUT_SPEED = MCAL_GPIO_INPUT;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2200      	movs	r2, #0
 8000594:	709a      	strb	r2, [r3, #2]
	MCAL_vid_GPIO_INIT(GPIOA, PIN_CFG);
 8000596:	6879      	ldr	r1, [r7, #4]
 8000598:	4804      	ldr	r0, [pc, #16]	; (80005ac <GPIO_Init+0x7c>)
 800059a:	f7ff fe95 	bl	80002c8 <MCAL_vid_GPIO_INIT>
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40010c00 	.word	0x40010c00
 80005ac:	40010800 	.word	0x40010800

080005b0 <main>:

int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
	volatile uint8_t i;
	RCC_Init();
 80005b6:	f7ff ffa7 	bl	8000508 <RCC_Init>
	GPIO_Init();
 80005ba:	f7ff ffb9 	bl	8000530 <GPIO_Init>
	while(1)
	{
		if(MCAL_uint8_GPIO_READ_PIN(GPIOA, GPIO_PIN1) == (uint8_t)0)
 80005be:	2101      	movs	r1, #1
 80005c0:	4814      	ldr	r0, [pc, #80]	; (8000614 <main+0x64>)
 80005c2:	f7ff ff45 	bl	8000450 <MCAL_uint8_GPIO_READ_PIN>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d10b      	bne.n	80005e4 <main+0x34>
		{
			MCAL_vid_TOGGLE_PIN(GPIOB, GPIO_PIN1);
 80005cc:	2101      	movs	r1, #1
 80005ce:	4812      	ldr	r0, [pc, #72]	; (8000618 <main+0x68>)
 80005d0:	f7ff ff6e 	bl	80004b0 <MCAL_vid_TOGGLE_PIN>
			while( MCAL_uint8_GPIO_READ_PIN(GPIOA, GPIO_PIN1) == (uint8_t)0 );
 80005d4:	bf00      	nop
 80005d6:	2101      	movs	r1, #1
 80005d8:	480e      	ldr	r0, [pc, #56]	; (8000614 <main+0x64>)
 80005da:	f7ff ff39 	bl	8000450 <MCAL_uint8_GPIO_READ_PIN>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d0f8      	beq.n	80005d6 <main+0x26>
		}
		if( MCAL_uint8_GPIO_READ_PIN(GPIOA, GPIO_PIN13) == (uint8_t)1 )
 80005e4:	210d      	movs	r1, #13
 80005e6:	480b      	ldr	r0, [pc, #44]	; (8000614 <main+0x64>)
 80005e8:	f7ff ff32 	bl	8000450 <MCAL_uint8_GPIO_READ_PIN>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b01      	cmp	r3, #1
 80005f0:	d103      	bne.n	80005fa <main+0x4a>
		{
			MCAL_vid_TOGGLE_PIN(GPIOB, GPIO_PIN13);
 80005f2:	210d      	movs	r1, #13
 80005f4:	4808      	ldr	r0, [pc, #32]	; (8000618 <main+0x68>)
 80005f6:	f7ff ff5b 	bl	80004b0 <MCAL_vid_TOGGLE_PIN>
		}
		for(i=0;i<255;i++)
 80005fa:	2300      	movs	r3, #0
 80005fc:	71fb      	strb	r3, [r7, #7]
 80005fe:	e004      	b.n	800060a <main+0x5a>
 8000600:	79fb      	ldrb	r3, [r7, #7]
 8000602:	b2db      	uxtb	r3, r3
 8000604:	3301      	adds	r3, #1
 8000606:	b2db      	uxtb	r3, r3
 8000608:	71fb      	strb	r3, [r7, #7]
 800060a:	79fb      	ldrb	r3, [r7, #7]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2bff      	cmp	r3, #255	; 0xff
 8000610:	d1f6      	bne.n	8000600 <main+0x50>
		if(MCAL_uint8_GPIO_READ_PIN(GPIOA, GPIO_PIN1) == (uint8_t)0)
 8000612:	e7d4      	b.n	80005be <main+0xe>
 8000614:	40010800 	.word	0x40010800
 8000618:	40010c00 	.word	0x40010c00

0800061c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800061c:	480d      	ldr	r0, [pc, #52]	; (8000654 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800061e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000620:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000624:	480c      	ldr	r0, [pc, #48]	; (8000658 <LoopForever+0x6>)
  ldr r1, =_edata
 8000626:	490d      	ldr	r1, [pc, #52]	; (800065c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000628:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <LoopForever+0xe>)
  movs r3, #0
 800062a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800062c:	e002      	b.n	8000634 <LoopCopyDataInit>

0800062e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800062e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000630:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000632:	3304      	adds	r3, #4

08000634 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000634:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000636:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000638:	d3f9      	bcc.n	800062e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800063a:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <LoopForever+0x12>)
  ldr r4, =_ebss
 800063c:	4c0a      	ldr	r4, [pc, #40]	; (8000668 <LoopForever+0x16>)
  movs r3, #0
 800063e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000640:	e001      	b.n	8000646 <LoopFillZerobss>

08000642 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000642:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000644:	3204      	adds	r2, #4

08000646 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000646:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000648:	d3fb      	bcc.n	8000642 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800064a:	f000 f811 	bl	8000670 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800064e:	f7ff ffaf 	bl	80005b0 <main>

08000652 <LoopForever>:

LoopForever:
    b LoopForever
 8000652:	e7fe      	b.n	8000652 <LoopForever>
  ldr   r0, =_estack
 8000654:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000658:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800065c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000660:	080006d8 	.word	0x080006d8
  ldr r2, =_sbss
 8000664:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000668:	20000058 	.word	0x20000058

0800066c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800066c:	e7fe      	b.n	800066c <ADC1_2_IRQHandler>
	...

08000670 <__libc_init_array>:
 8000670:	b570      	push	{r4, r5, r6, lr}
 8000672:	2500      	movs	r5, #0
 8000674:	4e0c      	ldr	r6, [pc, #48]	; (80006a8 <__libc_init_array+0x38>)
 8000676:	4c0d      	ldr	r4, [pc, #52]	; (80006ac <__libc_init_array+0x3c>)
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	10a4      	asrs	r4, r4, #2
 800067c:	42a5      	cmp	r5, r4
 800067e:	d109      	bne.n	8000694 <__libc_init_array+0x24>
 8000680:	f000 f81a 	bl	80006b8 <_init>
 8000684:	2500      	movs	r5, #0
 8000686:	4e0a      	ldr	r6, [pc, #40]	; (80006b0 <__libc_init_array+0x40>)
 8000688:	4c0a      	ldr	r4, [pc, #40]	; (80006b4 <__libc_init_array+0x44>)
 800068a:	1ba4      	subs	r4, r4, r6
 800068c:	10a4      	asrs	r4, r4, #2
 800068e:	42a5      	cmp	r5, r4
 8000690:	d105      	bne.n	800069e <__libc_init_array+0x2e>
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000698:	4798      	blx	r3
 800069a:	3501      	adds	r5, #1
 800069c:	e7ee      	b.n	800067c <__libc_init_array+0xc>
 800069e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80006a2:	4798      	blx	r3
 80006a4:	3501      	adds	r5, #1
 80006a6:	e7f2      	b.n	800068e <__libc_init_array+0x1e>
 80006a8:	080006d0 	.word	0x080006d0
 80006ac:	080006d0 	.word	0x080006d0
 80006b0:	080006d0 	.word	0x080006d0
 80006b4:	080006d4 	.word	0x080006d4

080006b8 <_init>:
 80006b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ba:	bf00      	nop
 80006bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006be:	bc08      	pop	{r3}
 80006c0:	469e      	mov	lr, r3
 80006c2:	4770      	bx	lr

080006c4 <_fini>:
 80006c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006c6:	bf00      	nop
 80006c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ca:	bc08      	pop	{r3}
 80006cc:	469e      	mov	lr, r3
 80006ce:	4770      	bx	lr
