
XC8Application1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000148  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000148  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  00000177  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000185  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000780  00000000  00000000  000001a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004fd  00000000  00000000  00000925  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000018c  00000000  00000000  00000e22  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000196  00000000  00000000  00000fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000041  00000000  00000000  0000116a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000011ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000000c6  000000c6  0000013a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    00000044  0000006c  0000006c  000000e0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_fini 00000002  000000ce  000000ce  00000142  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_funcs_on_exit 00000002  000000d0  000000d0  00000144  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_simulator_exit 00000002  000000d2  000000d2  00000146  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.exit    00000016  000000b0  000000b0  00000124  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text._Exit   00000004  000000ca  000000ca  0000013e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
   c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
  50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <_etext>
  64:	0c 94 58 00 	jmp	0xb0	; 0xb0 <exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000000c6 <__bad_interrupt>:
  c6:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

0000006c <main>:


int main(void)
{
	
	DDRA_REG = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	CLR_BIT(DDRD_REG,0);
  70:	81 b3       	in	r24, 0x11	; 17
  72:	8e 7f       	andi	r24, 0xFE	; 254
  74:	81 bb       	out	0x11, r24	; 17
	SET_BIT(PORTD_REG,0);
  76:	82 b3       	in	r24, 0x12	; 18
  78:	81 60       	ori	r24, 0x01	; 1
  7a:	82 bb       	out	0x12, r24	; 18
	int count=0;
  7c:	20 e0       	ldi	r18, 0x00	; 0
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	02 c0       	rjmp	.+4      	; 0x86 <main+0x1a>
		{
			while(GET_BIT(PIND_REG,0)==0);
			TOG_BIT(PORTA_REG,count++);
		}
		if(count == 8)
			count =0;
  82:	20 e0       	ldi	r18, 0x00	; 0
  84:	30 e0       	ldi	r19, 0x00	; 0
	CLR_BIT(DDRD_REG,0);
	SET_BIT(PORTD_REG,0);
	int count=0;
    while(1)
    {
		if(GET_BIT(PIND_REG,0)==0)
  86:	80 99       	sbic	0x10, 0	; 16
  88:	0f c0       	rjmp	.+30     	; 0xa8 <main+0x3c>
		{
			while(GET_BIT(PIND_REG,0)==0);
  8a:	80 9b       	sbis	0x10, 0	; 16
  8c:	fe cf       	rjmp	.-4      	; 0x8a <main+0x1e>
			TOG_BIT(PORTA_REG,count++);
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	02 2e       	mov	r0, r18
  94:	02 c0       	rjmp	.+4      	; 0x9a <main+0x2e>
  96:	88 0f       	add	r24, r24
  98:	99 1f       	adc	r25, r25
  9a:	0a 94       	dec	r0
  9c:	e2 f7       	brpl	.-8      	; 0x96 <main+0x2a>
  9e:	9b b3       	in	r25, 0x1b	; 27
  a0:	89 27       	eor	r24, r25
  a2:	8b bb       	out	0x1b, r24	; 27
  a4:	2f 5f       	subi	r18, 0xFF	; 255
  a6:	3f 4f       	sbci	r19, 0xFF	; 255
		}
		if(count == 8)
  a8:	28 30       	cpi	r18, 0x08	; 8
  aa:	31 05       	cpc	r19, r1
  ac:	61 f7       	brne	.-40     	; 0x86 <main+0x1a>
  ae:	e9 cf       	rjmp	.-46     	; 0x82 <main+0x16>

Disassembly of section .text.__dummy_fini:

000000ce <_fini>:
  ce:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

000000d0 <__funcs_on_exit>:
  d0:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

000000d2 <__simulator_exit>:
  d2:	08 95       	ret

Disassembly of section .text.exit:

000000b0 <exit>:
  b0:	ec 01       	movw	r28, r24
  b2:	0e 94 68 00 	call	0xd0	; 0xd0 <__funcs_on_exit>
  b6:	0e 94 67 00 	call	0xce	; 0xce <_fini>
  ba:	ce 01       	movw	r24, r28
  bc:	0e 94 69 00 	call	0xd2	; 0xd2 <__simulator_exit>
  c0:	ce 01       	movw	r24, r28
  c2:	0e 94 65 00 	call	0xca	; 0xca <_Exit>

Disassembly of section .text._Exit:

000000ca <_Exit>:
  ca:	0e 94 34 00 	call	0x68	; 0x68 <_exit>
